version: 2.1


orbs:
  slack: circleci/slack@4.10.1


executors:
  python:
    docker:
      - image: python:3.7-alpine3.16
  aws:
    docker:
      - image: amazon/aws-cli
  node:
    docker:
      - image: circleci/node:13.8.0

commands:
  destroy_environment:
    description: Destroys back-end and front-end cloudformation stack given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}



jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
      - slack/notify:
          event: fail
          template: basic_fail_1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build


  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
      - slack/notify:
          event: fail
          template: basic_fail_1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front end
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test backend
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
      - slack/notify:
          event: fail
          template: basic_fail_1
  scan-frontend:
    docker:
    # Docker image here
      - image: circleci/node:13.8.0
    steps:
    # Checkout code from git
      - checkout
    # Restore from cache
      - restore_cache:
          keys: [frontend-build]
    # Your job code here
      - run:
          name: audit frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
      - slack/notify:
          event: fail
          template: basic_fail_1
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: audit backend
          command: |
            cd backend
            npm install
            npm update mkdirp --depth 2
            npm update path-parse --depth 3
            npm update kind-of --depth 10
            npm install --save-dev webpack@5.73.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    # Docker image here that supports AWS CLI
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}            

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filter "Name=key-name,Values=udacity" --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [ "47:16:e8:f0:4c:e7:54:01:83:f0:b7:78:7d:82:fc:90" ]
      - attach_workspace:
          at: ~/
      - run:
          name: Install openssh
          command: |
            # install the dependencies needed for ansible playbook
            apk add --update openssh-client git
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for ansible playbook
            apk add --update ansible
            pip install awscli
      - run:
          name: Run Playbook and Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  run-migrations:
    executor: python
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl openssh nodejs npm
            pip install awscli
            npm --version
            aws --version
      - restore_cache:
          keys: ['backend-build']
      - run:
          name: Run database migrations
          command: |
            cd backend
            npm install 
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/TQEKx4xW6CdJWtzUryzEPk/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli curl
            pip install awscli 
            aws --version
      - run:
          name: Get backend url
          command: |
            export API_URL=$(cat backend-url.txt)
            echo "API_URL = ${API_URL}"
            echo "API_URL=${API_URL}" >> frontend/.env
            cat frontend/.env
#            export BACKEND_IP=$(aws ec2 describe-instances --filter "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].[PublicIpAddress]" --output text)
#            export API_URL="http://${BACKEND_IP}:3030"
#            echo "${API_URL}"
#            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
#            cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            #delay for 5 seconds to allow the frontend to be deployed
            sleep 30
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --region=us-east-1 --recursive
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  deploy-backend:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
            fingerprints: [ "47:16:e8:f0:4c:e7:54:01:83:f0:b7:78:7d:82:fc:90" ]
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli curl ansible
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filter "Name=key-name,Values=udacity" --output text >> .circleci/ansible/inventory.txt
            cd backend
            npm install
            npm run build
            echo "listing what we have got"
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            sleep 20
            cd .circleci/ansible
            echo "listing what we have got"
            ls
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ls
            sleep 30
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy_environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm curl
            pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Back-end Smoke Test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filter "Name=key-name,Values=udacity" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
#      - run:
#          name: Frontend smoke test.
#          command: |
#            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
#            echo ${URL}
#            if curl -s ${URL} | grep "Welcome"
#            then
#              return 0
#            else
#              return 1
#            fi
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

workflows:
  default:
    jobs:
      - build-frontend:
          context: SLACK-API-CONNECT
      - build-backend:
          context: SLACK-API-CONNECT
      - test-frontend:
          context: SLACK-API-CONNECT
          requires: [build-frontend]
      - test-backend:
          context: SLACK-API-CONNECT
          requires: [build-backend]
      - scan-backend:
          context: SLACK-API-CONNECT
          requires: [build-backend]
      - scan-frontend:
          context: SLACK-API-CONNECT
          requires: [build-frontend]
      - deploy-infrastructure
      - configure_infrastructure
      - run-migrations
      - deploy-frontend:
            requires: [deploy-infrastructure]
      - deploy-backend:
            requires: [deploy-infrastructure]
      - smoke-test:
            requires: [deploy-backend]
